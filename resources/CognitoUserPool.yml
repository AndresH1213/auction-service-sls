Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      # Generate a name base on the stage
      UserPoolName: ${self:custom.AppName}-user-pool-${self:provider.stage}
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # Generate an app client name base on the stage
      ClientName: ${self:custom.AppName}-user-pool-client-${self:provider.stage}
      UserPoolId:
        Ref: CognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false

  # The federate identity for our user pool to auth with
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      # Generate a name based on the stage
      IdentityPoolName: ${self:custom.AppName}-identity-pool-${self:provider.stage}
      # Don't allow unathenticated user
      AllowUnauthenticatedIdentities: false
      # Link to our User Pool
      CognitoIdentityProviders:
        - ClientId:
            Ref: CognitoUserPoolClient
          ProviderName:
            Fn::GetAtt: ['CognitoUserPool', 'ProviderName']

  # IAM roles
  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt: [CognitoAuthRole, Arn]

  # IAM role used for authenticated users
  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: CognitoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
              # # Allow users to upload attachements to their
              # # folder inside our S3 bucket
              # - Effect: 'Allow'
              #   Action:
              #     - 's3:*'
              #   Resource:
              #     - Fn::Join:
              #         - ''
              #         - - 'Fn::ImportValue': ${self:provider.stage}-ExtAttachmentsBucketArn
              #           - '/private/'
              #           - '$'
              #           - '{cognito-identity.amazonaws.com:sub}/*'

  # Print out the Id of the User Pool and Identity Pool that are created
Outputs:
  UserPoolId:
    Value:
      Ref: CognitoUserPool

  UserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient

  IdentityPoolId:
    Value:
      Ref: CognitoIdentityPool

  CognitoAuthRole:
    Value:
      Ref: CognitoAuthRole
    Export:
      Name: ExtCognitoAuthRole-${self:provider.stage}

  UserPoolArn:
    Value: !Join
      - ''
      - - 'arn:aws:cognito-idp:'
        - !Ref AWS::Region
        - ':'
        - !Ref AWS::AccountId
        - ':'
        - 'userpool'
        - '/'
        - !Ref CognitoUserPool
    Description: User pool ARN
    Export:
      Name: userpoolarn
