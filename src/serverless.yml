service: action-service
frameworkVersion: '3'

plugins:
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
  iam:
    role:
      statements:
        - ${file(../iam/AuctionsTableIAM.yml):AuctionsTableIAM}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.AppName}-api-id-${self:provider.stage}
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.AppName}-api-root-id-${self:provider.stage}

resources:
  - ${file(../resources/AuctionsTable.yml)}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction
          cors: true
          authorizerId:
            'Fn::ImportValue': ${self:custom.AppName}-authorizer-id-${self:provider.stage}

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions

  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auction/{id}

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid

  processAuctions:
    handler: src/handlers/processAuctions.handler
    # events:
    #   - schedule: rate(1 minute)

custom:
  AuctionsTable:
    # when we deploy our stack is gonna be replace with the name of our table
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  AppName: AuctionApp
  bundle:
    linting: false
